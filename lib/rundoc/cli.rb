module Rundoc
  class CLI
    def build(path:)
      @path = Pathname.new(path).expand_path

      raise "#{@path} does not exist" unless File.exist?(@path)
      raise "Expecting #{@path} to be a rundoc markdown file" unless File.file?(@path)

      root_rundoc_dir = Pathname.new(File.expand_path("../", @path))

      tmp_output_dir = root_rundoc_dir.join("tmp")
      screenshots_path = if Rundoc.project_root
        tmp_output_dir.join(Rundoc.project_root, "screenshots")
      else
        tmp_output_dir.join("screenshots")
      end

      tmp_output_dir.join("screenshots")

      dot_env_path = File.expand_path("../.env", @path)
      if File.exist?(dot_env_path)
        require "dotenv"
        Dotenv.load(dot_env_path)
        ENV["AWS_ACCESS_KEY_ID"] ||= ENV["BUCKETEER_AWS_ACCESS_KEY_ID"]
        ENV["AWS_REGION"] ||= ENV["BUCKETEER_AWS_REGION"]
        ENV["AWS_SECRET_ACCESS_KEY"] ||= ENV["BUCKETEER_AWS_SECRET_ACCESS_KEY"]
        ENV["AWS_BUCKET_NAME"] ||= ENV["BUCKETEER_BUCKET_NAME"]
      end

      source_contents = File.read(@path)

      FileUtils.remove_entry_secure(tmp_output_dir) if tmp_output_dir.exist?
      tmp_output_dir.mkdir
      banner = <<~HEREDOC
        <!-- STOP
          This file was generated by a rundoc script, do not modify it.

          Instead modify the rundoc script and re-run it.

          Command: #{$0} #{$*.join(" ")}
        STOP -->
      HEREDOC

      puts "== Running your docs"
      Dir.chdir(tmp_output_dir) do
        @output = Rundoc::Parser.new(
          source_contents,
          output_dir: tmp_output_dir,
          document_path: @path,
          screenshots_path: screenshots_path
        ).to_md
        Rundoc.sanitize(@output)
        @output = "#{banner}\n#{@output}"
      end

      puts "== Done, run was successful"
      project_name = if Rundoc.project_root
        Rundoc.project_root.split("/").last
      else
        "project"
      end

      project_dir = root_rundoc_dir.join(project_name)

      FileUtils.remove_entry_secure(project_dir) if project_dir.exist?

      cp_root = if Rundoc.project_root
        tmp_output_dir.join(Rundoc.project_root, ".")
      else
        tmp_output_dir.join(".")
      end

      FileUtils.cp_r(cp_root, project_dir)

      FileUtils.remove_entry_secure(tmp_output_dir) if tmp_output_dir.exist?

      source_path = project_dir.join("README.md")
      puts "== Done, writing original source to #{source_path}"
      File.write(source_path, @output)

      puts "== Copying source"
      source_path = project_dir.join("copied-#{@path.to_s.split("/").last}")
      File.write(source_path, source_contents)

      Dir.chdir(project_dir) do
        Rundoc.run_after_build
      end
    ensure
      Rundoc::CodeCommand::Background::ProcessSpawn.tasks.each do |name, task|
        next unless task.alive?

        puts "Warning background task is still running, cleaning up: name: #{name}"
        task.stop
      end
    end
  end
end
