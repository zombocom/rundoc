#!/usr/bin/env ruby

$stdout.sync = true

unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rundoc'
require 'thor'

class RundocThorCLI < Thor

  def initialize(*args)
    super
    @path = options[:path]
  end

  default_task :help

  desc "build", "turns rundoc file into docs and a project"
  class_option  :path,   banner: "path/to/file.md",          optional: true, default: 'rundoc.md'
  # class_option  :output_dir,   banner: "path/to/output_dir", optional: true, default: 'rundoc.md'

  def build
    if !File.exist?(@path)
      raise "#{@path} does not exist"
    elsif !File.file?(@path)
      raise "Expecting #{@path} to be a rundoc markdown file"
    end

    Rundoc::CLI.new(
      source_path: @path
    ).call()
  end
end

RundocThorCLI.start(ARGV)
